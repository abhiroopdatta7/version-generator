name: Build Multi-Platform

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for accurate version detection

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Get version information
      id: version
      run: |
        # Get version information using git
        VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
        GIT_COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # If we're on a tag, use just the tag name
        if git describe --exact-match --tags HEAD >/dev/null 2>&1; then
            VERSION=$(git describe --exact-match --tags HEAD)
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "git_commit=${GIT_COMMIT}" >> $GITHUB_OUTPUT
        echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        echo "Git Commit: $GIT_COMMIT"
        echo "Build Date: $BUILD_DATE"

    - name: Run tests
      run: go test -v ./...

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        # Build flags with version embedding
        VERSION="${{ steps.version.outputs.version }}"
        GIT_COMMIT="${{ steps.version.outputs.git_commit }}"
        BUILD_DATE="${{ steps.version.outputs.build_date }}"
        
        LDFLAGS="-s -w"
        LDFLAGS="$LDFLAGS -X main.Version=$VERSION"
        LDFLAGS="$LDFLAGS -X main.GitCommit=$GIT_COMMIT"
        LDFLAGS="$LDFLAGS -X main.BuildDate=$BUILD_DATE"
        
        if [ "${{ matrix.goos }}" = "windows" ]; then
          go build -ldflags="$LDFLAGS" -o version-generator.exe .
        else
          go build -ldflags="$LDFLAGS" -o version-generator .
        fi

    - name: Package binary
      run: |
        VERSION=${{ steps.version.outputs.version }}
        PACKAGE_NAME="version-generator-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}"
        mkdir -p "$PACKAGE_NAME"
        
        if [ "${{ matrix.goos }}" = "windows" ]; then
          mv version-generator.exe "$PACKAGE_NAME/"
          zip -r "${PACKAGE_NAME}.zip" "$PACKAGE_NAME"
          echo "package_file=${PACKAGE_NAME}.zip" >> $GITHUB_ENV
        else
          mv version-generator "$PACKAGE_NAME/"
          tar -czf "${PACKAGE_NAME}.tar.gz" "$PACKAGE_NAME"
          echo "package_file=${PACKAGE_NAME}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: version-generator-${{ steps.version.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}
        path: ${{ env.package_file }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*/*.zip
          artifacts/*/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
